# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FLAG = b"CTF{5ign3d_z3r0_NaNs_and_infiniti3s_rock_but_den0rmal5_4re_meh}\x00"
F = len(FLAG) * 8 # FLAG_BITS
FLAG = int.from_bytes(FLAG, "little")


# We're treating the flag bits (64*8) as an n-bit integer.

# 0. flag is gates[0:F]

# 1. F2 = F + (F<<3)
#
# F2 is gates[F+1:5F+1:4]
#
# sum_n = carry XOR a_n XOR b_n
# carry' = (a_n AND b_n) OR (carry_n AND (a_n XOR b_n))
#
# carry_i = gates[0 + i * 4]
# sum_i   = gates[1 + i * 4]
# a nand b = gates[2 + i * 4]
# carry_i nand (a_n XOR b_n) = gates[3 + i * 4]

# carry_i+1 = gates[4 + i * 4]

for i in range(F):
  print("printf(\"%%f\\n\", gates[%d]);" % i)
  if i % 8 == 7:
    print("printf(\"\\n\");")

for i in range(F):
  if i < 3:
    print("gates[%d] = gates[%d]; // sum_i" % (i*4 + F + 1, i))
    print("gates[%d] = -0.0; // carry_out_i" % (i * 4 + 4 + F))
  else:
    print("gates[%d] = gates[%d] * gates[%d] * gates[%d]; // sum_i" % (i*4 + F + 1, i, i-3, i*4 + F))
    print("gates[%d] = -gates[%d] - gates[%d]; // a nand b" % (i*4 + F + 2, i, i-3))
    print("gates[%d] = -gates[%d] + (gates[%d] * gates[%d]); // c nand (a xor b)" % (i*4 + F + 3, i*4 + F, i, i-3))
    print("gates[%d] = -gates[%d] - gates[%d]; // carry_out_i" % (i * 4 + 4 + F, i * 4 + F + 2, i * 4 + F + 3))

  print('printf("S_%02d = %%f, C_%d = %%f\\n", gates[%d], gates[%d]);' % (i, i, i*4+F+1, i*4+F+4))

#for i in range(F * 4):
#  print('printf("gate_%d = %%f\\n", gates[%d]);' % (i, i))



# 2. F3 = F2 + (F<<7)
#
# F3 is gates[5F+1:9F+1:4]
# as above

f3 = FLAG + (FLAG<<3) + (FLAG << 7)
print("// f3: %s" % hex(f3))

for i in range(F):
  if i < 7:
    print("gates[%d] = gates[%d]; // sum_i" % (i*4 + 5*F + 1, 4*i + F + 1))
    print("gates[%d] = -0.0; // carry_out_i" % (i * 4 + 4 + 5*F))
  else:
    print("gates[%d] = gates[%d] * gates[%d] * gates[%d]; // sum_i" % (i*4 + 5*F + 1, 5*F + i*4, i-7, i*4 + F + 1))
    print("gates[%d] = -gates[%d] - gates[%d]; // a nand b" % (i*4 + 5*F + 2, i*4+F+1, i-7))
    print("gates[%d] = -gates[%d] + (gates[%d] * gates[%d]); // c nand (a xor b)" % (i*4 + 5*F + 3, i*4 + 5*F, i*4+F+1, i-7))
    print("gates[%d] = -gates[%d] - gates[%d]; // carry_out_i" % (i * 4 + 4 + 5*F, i * 4 + 5*F + 2, i * 4 + 5*F + 3))

  print('printf("S2_%02d = %%f, C2_%d = %%f\\n", gates[%d], gates[%d]);' % (i, i, i*4+5*F+1, i*4+5*F+4))

# 3. F4 = (F3 << 4) ^ F3
#
# F4 is gates[:F]

f4 = (f3<<4)^f3
print("// f4: %s" % hex(f4))

for i in range(F):
  if i < 4:
    print("gates[%d] = gates[%d]; // xor_i" % (i, 5*F+1+4*i))
  else:
    print("gates[%d] = -gates[%d] * gates[%d]; // xor_i" % (i, i*4 + 5*F + 1, 5*F + 1 + (i-4)*4))

  print('printf("X2_%02d = %%f\\n", gates[%d]);' % (i, i))

# 4. F5 = F4 + const1
# F5 is gates[F+1:5F+1:4]

print("gates[%d] = -0.0; // carry 0" % F)

const_1 = [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0]

const_1i = int("".join(str(c) for c in const_1)[::-1], 2)
f5 = f4 + const_1i
print("// f5: %s" % hex(f5))

for i in range(F):
  bit = ["(-0.0f)", "(0.0f)"][const_1[i]]
  print("gates[%d] = gates[%d] * %s * gates[%d]; // sum_i" % (i*4 + F + 1, i, bit, i*4 + F))
  print("gates[%d] = -gates[%d] - %s; // a nand b" % (i*4 + F + 2, i, bit))
  print("gates[%d] = -gates[%d] + (gates[%d] * %s); // c nand (a xor b)" % (i*4 + F + 3, i*4 + F, i, bit))
  print("gates[%d] = -gates[%d] - gates[%d]; // carry_out_i" % (i * 4 + 4 + F, i * 4 + F + 2, i * 4 + F + 3))

  print('printf("S_%02d = %%f, C_%d = %%f\\n", gates[%d], gates[%d]);' % (i, i, i*4+F+1, i*4+F+4))

# 5. F6 = F5 ^ const2
# F6 is gates[:F]

const_2 = [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0]

const_2i = int("".join(str(c) for c in const_2)[::-1], 2)
f6 = f5 ^ const_2i
print("// f6: %s" % hex(f6))

for i in range(F):
  bit = ["(-0.0f)", "(0.0f)"][1-const_2[i]]
  print("gates[%d] = gates[%d] * %s; // xor_i" % (i, i*4 + F + 1, bit))

  print('printf("X2_%02d = %%f\\n", gates[%d]);' % (i, i))

# 6. translate to 0.0 or 1.0
# F7 is gates[F:2F]

print("#define MIN(x, y) (((x) < (y)) ? (x) : (y))")

for i in range(F):
  print("gates[%d] = 1.0f / gates[%d];" % (F + i, i))
  print("gates[%d] = MIN(1.0f, gates[%d]);" % (i, F + i))
  print("gates[%d] = 1.0f / gates[%d];" % (F + i, i))

  print('printf("X2_%02d = %%f\\n", gates[%d]);' % (i, F+i))

# 7. translate to one of two constants
# F8 is gates[:F]

c0 = [26, -32, -67, -51, -29, 45, 2, -39, -75, -5, -29, -21, -91, 43, 12, 92, 82, 98, -17, 77, 34, 23, 76, 99, -89, -48, 87, 76, -82, -92, -1, -48, 15, 95, -5, 65, 76, 45, 89, -68, -24, 69, 38, 60, 20, 13, 68, -78, 62, 39, 75, 28, -4, 80, 13, -21, -85, -64, 51, 99, -57, -8, 53, -57, 98, 74, -90, 83, -87, -43, -62, -30, -81, 7, -7, 92, 52, -94, 42, 61, -36, 72, 47, -96, -40, 20, 81, -33, 27, -44, -78, -41, 68, 63, -19, 91, 59, 29, -50, -14, -31, -90, 81, 86, 94, 50, -14, 56, 94, -51, 17, -50, 67, -76, -37, -87, -77, -68, -66, 37, 84, 57, 10, -95, 58, 96, -9, 45, 7, -87, -49, 32, 25, 36, 38, -38, -98, 9, 51, 7, -97, 51, -86, -14, 21, -57, 77, 49, 56, -18, 83, 87, 14, -7, -40, 18, 3, 25, -42, -39, -1, -83, 14, 83, 72, -85, 77, 35, 51, -71, -1, -3, -11, -93, -99, -96, -39, -12, 93, -51, 4, -23, -99, 36, -14, 18, 80, 14, -8, -13, 85, 76, -17, 22, 42, -85, -57, -26, -35, 98, -59, -15, -19, -31, -45, -55, 83, -71, 74, 25, 20, 39, -31, -63, 20, -65, -15, -44, 6, -69, -53, 35, 84, -45, 42, -32, -6, -25, 52, -9, 3, 29, 41, 97, 60, 71, -72, 31, 59, -32, -73, 13, 23, -68, -26, 20, 89, -23, 5, 38, -33, 39, 78, 42, -35, 55, -58, 27, -18, 56, -79, -10, -87, 99, -12, -80, -80, -19, 13, -43, -28, -20, 13, -57, 96, 28, 95, -6, 33, 30, -44, -76, -46, 80, 68, -85, -10, -75, -8, 58, -28, 9, -65, 65, 81, -81, 66, 57, 28, 45, 25, 50, 46, 0, -44, 79, -55, -73, 51, 52, -44, -75, 17, -37, -48, -75, -14, 97, 72, -36, 48, -22, 61, 87, 57, 76, 88, 70, -7, 97, -46, 10, -64, 54, -34, -73, 68, 4, -32, 0, -72, -37, 27, 25, 33, -25, -73, -30, 50, 29, -31, -69, -26, -5, -44, -27, 56, 9, -1, 23, 90, -96, 19, 44, 58, -45, -52, -83, -37, 61, 42, -46, 9, -25, 99, 16, -13, -26, 23, 12, -37, -15, 38, 11, 1, -88, -36, -69, -83, 36, -89, 78, -46, -95, -89, -37, -86, -32, -52, -6, -84, 23, 36, -46, 69, -73, -81, -94, -4, -38, -61, -48, -63, 54, -90, 52, 36, 78, -1, -52, -3, -72, -34, -49, -65, 25, -93, 54, -91, 19, 92, -95, -34, -1, -99, 70, 45, -98, -22, 55, 58, -97, 82, -30, -94, 14, 7, -14, 82, 22, -90, -58, -54, -68, 32, -8, 3, -66, -33, -75, -95, -54, 58, 6, 89, 34, -50, 33, -73, -84, -6, -82, -15, 53, -5, -18, -17, 91, -99, -17, 20, -22, 57, -71, -56, 62, -56, -63, -8, -14, -21, 86, -31, 75, -55, 95, -65, 22, -57, -96, -39, -29, -33, 14, -85, -72, 6, -23, 6, 75, -14, 53]
c1 = [-7, 97, -15, -67, -90, -8, 73, -95, 53, 27, -80, 86, 89, -13, 38, 27, -38, -35, -35, 77, -46, -15, -33, -63, 29, -5, 27, 66, 17, 82, -64, 79, 14, 45, 16, 72, 91, 83, -7, -42, 49, 81, -13, -76, -6, 58, -36, 55, 68, -28, -8, -23, -51, -36, -79, -15, 32, 30, -22, 88, 47, 4, 96, -47, 17, 37, -83, 66, -6, -27, -31, -89, -98, -54, 51, -56, -70, 94, 90, 53, 34, -26, -4, 90, -38, -84, 52, 15, -69, -79, 24, -46, 39, 19, -14, -40, 34, 64, -49, -41, -98, 57, -68, 19, 10, 36, -84, 57, 37, -41, 58, 91, 67, 26, 27, 21, -15, -85, 7, 78, 32, 46, -44, 19, -30, 56, -69, 19, -86, 22, -33, -63, -87, 53, 99, -97, -83, -79, 20, 65, 86, -18, -27, 0, -27, -52, 44, -29, 48, 41, 76, -91, -12, -46, 55, -13, -3, 34, 15, -88, -5, -70, -95, 98, 42, 83, 65, 55, -65, 69, 63, -85, 39, -85, 68, -35, 6, -98, -63, -62, 63, 79, 65, 27, -11, 78, -51, 94, -30, -17, 3, -94, -28, -44, -79, 98, 70, 45, -66, 18, -80, -50, -18, -92, 58, -94, 5, -29, -75, -36, -73, -26, 54, 52, -41, 55, 48, 90, 41, 40, -4, -93, 15, -10, 15, -87, 26, -15, -31, 73, -44, -20, 66, -4, -68, -50, -70, -47, -78, -4, 4, -61, -47, -65, 79, -83, -82, -91, -64, 79, -7, -72, -59, 97, -72, 38, 17, -2, 74, 57, -39, 8, 20, 82, 23, 30, 51, -86, -27, -47, 20, 79, 46, 25, -18, -14, 59, 84, -25, 23, -19, 42, -93, 0, -66, -67, 11, -66, 52, -34, 58, -95, 94, -74, -83, 77, 26, -13, 11, 96, 51, -13, -52, 37, 56, -70, 9, -28, 79, -63, -52, -89, 43, -51, -30, 60, -90, -26, -28, 17, 20, 14, -36, -30, 39, 75, -23, -3, 69, -30, 44, 80, -81, -3, 5, -92, 13, -30, 57, 68, -17, -52, 53, -48, -15, 56, -20, 46, 36, -48, -69, -22, -4, 92, 96, 86, 15, 83, -86, 27, 12, 75, 99, 52, -88, 89, 40, -43, -54, 50, 6, 36, -25, 92, -55, -27, -10, 64, 87, 95, 37, 47, -48, -79, -79, 90, -20, 71, -40, 24, -31, 17, 45, 62, -75, -90, 51, 46, 61, -93, 9, 51, 50, 75, -65, -35, -72, -70, -49, 85, -16, 95, -37, 63, -68, -57, -46, 27, 43, -48, 50, -18, 61, -99, -32, 19, 51, 42, -67, 12, -55, 24, 28, 26, 6, -74, 35, 97, -22, -89, 67, -66, 19, -46, 27, 41, -88, -39, -28, 1, 5, -10, -27, -88, 25, -86, 77, -28, 30, 55, -74, 26, -85, -37, -45, -6, -43, -1, 19, -35, 82, 52, 7, 80, 66, 45, 52, 53, 99, -55, -71, -3, -63, 2, 81, -90, 46, -11, 49, -12, 38, -70, -68, -3, 76, 61, 55, -19, -9, -99, -51, -9, -89, 2, 60, -85, -25, -90, -12, 31, -21, 6]
for i in range(F):
  if c0[i] == c1[i]:
    c1[i] += 1

for i in range(F):
  a = c0[i]
  b = c1[i]
  print("gates[%d] = %0.9ff + %0.9ff * gates[%d];" % (i, a, b-a, i+F))
  print('printf("tr_%02d = %%f\\n", gates[%d]);' % (i, i))
  print('printf("trfabs_%d = %%d\\n", fabs(gates[%d] - %f) < 0.5);' % (
      i, i, c1[i]))

# 8. even-index bits remain constant. odd-index bits are xor of itself with the
#    previous bit,
# F9 is gates[F:2F]

f9 = 0

for i in range(F):
  if i % 2 == 0:
    f9 |= ((f6>>i)&1) << i
  else:
    f9 |= (((f6>>i)&1) ^ ((f6>>(i-1))&1)) << i

print("// f9: %s" % hex(f9))

c2 = [-36, -30, 60, -75, -91, 15, -11, -77, 47, 18, -24, 97, -55, 81, 75, -98, 10, -96, 90, 50, 39, -84, 5, -3, -18, 7, 34, 58, -1, -53, 42, 29, -15, -26, -96, 10, -65, -63, -25, -16, 45, 65, 69, 2, 59, 76, -99, 31, 37, -74, 82, -65, -15, 23, -71, 84, 72, 14, 39, -38, -18, -82, 24, -36, 17, 27, 77, 80, 72, 23, 20, -2, 20, -65, 59, -73, -92, -4, 11, 16, 36, 50, -4, 44, 44, 80, -78, -14, 19, 9, 3, 76, 41, 18, -41, 95, 5, -91, 40, 54, 27, -90, 63, 20, -36, 76, -91, 53, -62, -36, -22, 62, -19, -52, -73, -19, -62, 71, -96, -60, -86, 47, -7, 40, -38, 95, -95, 65, -46, 11, -17, -18, -22, -30, 21, 5, -57, 86, -35, 36, 61, -68, -73, 81, -44, -91, -56, 9, 98, -99, -1, -70, 77, 13, -80, -47, -92, -75, 54, -38, 2, 80, 23, -56, 95, 42, 55, -53, 89, 90, 35, 97, -22, -76, 13, 24, 43, 29, 93, -54, 64, 85, -92, 95, -70, 31, 71, -13, -47, 97, -89, 33, -84, -77, -25, -49, 60, -81, 64, 37, 96, 64, 43, -68, -53, 25, -49, -36, -29, -82, -10, -20, -11, -96, 61, -48, 97, 4, 51, 35, 17, 58, 83, -80, -26, -39, 2, 2, -3, 51, -56, -69, -33, 59, 11, -20, -44, 61, -93, -54, -10, 66, 41, -96, 87, 83, 38, -70, -97, -23, -48, 54, 89, -53, -94, 74, -40, 37, -64, 32, -31, 50, -38, 99, -35, -90, 34, -1, 33, 23, -52, -19, -43, -64, -71, 64, -30, -84, 76, 44, 33, -40, 84, 12, -80, 9, 84, -40, -66, -95, 8, -83, 31, -17, -84, -48, -45, -79, 87, -41, 8, 85, 5, -70, -95, -98, -9, -23, 94, 11, 36, 58, 1, -62, 42, 28, -63, 8, -59, 72, 1, -33, 70, 1, -92, -40, 57, -70, 52, 2, -76, 54, 21, -37, 96, 54, 8, 10, 74, 20, -51, 56, -78, 94, -9, 97, 15, -58, -67, -88, 19, -37, 62, -95, -8, 52, -31, 81, -85, -16, 10, 23, 1, 60, 58, -99, 33, 92, 34, -19, -81, 33, -54, -59, -89, 38, 42, 12, -36, -66, 63, 2, -46, -72, -7, 89, -21, 78, 41, -81, -92, -26, 25, -3, 1, 74, -38, -54, -72, 78, -33, -14, 43, 60, -46, 82, 55, 70, -84, -30, 25, -35, -71, -30, -22, 94, 65, 11, -10, -74, -11, 87, 94, 0, 81, 93, 43, -70, 28, 69, -80, -17, 39, 29, -27, -21, -13, -10, 99, -20, 46, 94, -8, 54, 0, -82, 43, 41, 4, -12, 92, -83, 33, -81, -3, 71, -68, 69, -6, -96, 88, -56, 34, 4, 86, 99, 76, -40, -29, -90, -30, 69, 86, 16, 38, -6, 97, -99, 44, -74, -53, 2, 35, 7, 78, -18, -74, -81, -53, 66, 11, -84, 18, 91, 59, -17, 74, -76, 46, 71, 61, -54, -84, -27, 43, 3, -22, 84, -85, -41, 63, 30]
c3 = [91, 64, 62, 67, -81, 58, -2, 57, 71, -5, -24, -20, 34, 21, 7, -68, 74, -15, -77, 58, -71, 94, 3, -76, -5, 58, 49, 85, -22, -82, -24, -68, 31, -92, 37, 12, 73, -50, 48, -46, 51, 30, -4, 9, 48, -60, 36, -27, 22, -14, -6, -1, -31, 16, 27, 98, -49, 77, 40, 24, -81, -92, 52, 77, -55, 51, -82, 43, -34, -33, -79, 54, 3, -15, -57, 63, -16, -28, 27, -58, 86, -89, 97, -12, 44, 20, 86, -44, 14, 82, -16, 58, -60, -81, -29, 85, -37, 99, -80, 8, -11, -92, 54, 26, 55, -78, 63, -20, 1, 66, -53, -33, 57, 93, 84, 84, -66, -85, 68, 28, -69, -73, 80, -61, -63, 70, -24, 85, 82, 83, 84, -3, -18, -78, -79, -36, -88, -95, 4, 5, 28, 61, -66, 98, -80, 3, 34, -23, -39, 82, -28, -87, -21, -93, -59, -46, -33, -40, -47, 96, 89, -4, 93, -84, 19, 12, -65, 36, -82, -73, -34, -4, -75, 0, -75, -11, 12, -61, 74, 64, -8, 63, 25, -17, -36, -37, -58, 20, -51, -43, 6, -71, 79, 45, -70, 83, 40, -88, 83, -9, 59, -36, 50, -26, -76, 66, 16, 49, -52, 91, -17, -12, 84, -18, -39, 64, -18, 11, 87, 62, 79, -25, 48, -42, -88, -28, -95, -76, -9, -16, 98, -76, 24, -6, -85, -47, -43, 63, 90, 78, -53, -53, -58, 45, 28, 21, 80, 91, -1, 20, -78, 2, 36, 80, -44, 71, 97, -52, -57, -24, 98, 25, -18, -4, -25, -30, 10, 20, 65, 94, 12, 75, 77, 18, -11, 29, -69, -5, -40, 53, 75, 55, -87, -37, 3, -74, -37, 9, 74, 49, -50, 5, 46, -6, -71, -37, -86, -15, -43, 83, -16, 9, 1, 3, 23, -99, -97, 55, 70, 47, -49, 2, 54, -26, 82, 85, 83, -44, 2, -67, -52, -98, 33, 14, -84, 73, -99, -6, -32, -4, 6, 96, 81, -29, 56, -11, -54, -59, 70, 80, -37, 90, 5, 92, -3, -13, -57, -2, 13, -82, -70, -19, 8, -52, -51, -19, 22, -41, -78, -70, -96, 81, -15, 4, 20, 42, -89, 33, -81, -43, 65, 3, 43, 38, -8, 82, -56, 79, 83, -26, 34, 43, 33, 70, 23, -70, 57, -36, -51, 55, -35, 29, 8, 28, -51, 75, -64, 46, 40, 38, 64, 55, -1, 59, -25, 4, -60, -64, 56, 60, 32, -5, 51, -89, 50, -9, -84, -38, -62, -80, 47, -47, 11, -36, 77, 23, -64, 53, -59, -73, -58, -34, 48, -91, -43, 75, 61, -42, 14, 26, 21, 44, -1, -81, -74, 94, 46, 69, -60, -61, 64, -23, 78, 24, 42, -96, 55, -98, -30, 94, -76, -81, 72, -8, -77, 27, 83, -13, 22, -12, 55, 79, 67, 2, 66, -57, 71, 48, 90, -36, -46, -17, 29, 94, 56, -29, 54, 1, 35, -65, 35, 19, 86, 34, -99, -65, -8, 15, -52, -24, 57, -23, -25, -76, -60, 33, -12, 21, -54, -89, -50, -35]
for i in range(F):
  if c2[i] == c3[i]:
    c2[i] += 1

import numpy as np
import numpy.linalg
import sys

for i in range(0, F, 2):
  a = c0[i]
  b = c1[i]
  c = c2[i]
  d = c3[i]
  slope = (d-c)/(b-a)
  intercept = c - slope * a
  print("gates[%d] = %0.9ff + %0.9ff * gates[%d];" % (i+F, intercept, slope, i))

  x0, x1, y0, y1 = c0[i], c1[i], c0[i+1], c1[i+1]
  a, b, c, d = c2[i+1], c3[i+1], c3[i+1], c2[i+1]

  bvec = np.array([a,b,c,d])
  amat = np.array([
      [1, x0, y0, x0*y0],
      [1, x1, y0, x1*y0],
      [1, x0, y1, x0*y1],
      [1, x1, y1, x1*y1],
  ])

  p,q,r,s = numpy.linalg.solve(amat, bvec)
  # z = p + qx + ry + sxy
  print("gates[%d] = %0.9ff + %0.9ff * gates[%d] + %0.9ff * gates[%d] + %0.9ff * gates[%d] * gates[%d];" % (
      i+F+1, p, q, i, r, i+1, s, i, i+1))

  #print('printf("f9_%02d = %%f\\n", gates[%d]);' % (i, i+F))
  #print('printf("f9_%02d = %%f\\n", gates[%d]);' % (i+1, i+F+1))
  print('printf("f9fabs_%d = %%d\\n", fabs(gates[%d] - %f) < 0.5);' % (
      i, F+i, c3[i]))
  print('printf("f9fabs_%d = %%d\\n", fabs(gates[%d] - %f) < 0.5);' % (
      i+1, F+i+1, c3[i+1]))
  # Still good...

# 9. split F9 into two parts and calculate two additions:
#    M = F9[:F/2] * 17 + F9[F/2:] * 16
#    N = F9[:F/2] * 5 + F9[F/2:] * 4
#
# Even though they are N/2 bits, calculate them fully.
#
# Reminder: F9 is gates[1F:2F] -> first copy to [:F] and [F:2F] and zero extend
#
# M is gates[4F:5F]
# M = (first + last) * 16 + first
#
# N is gates[5F:6F]
# N = (first + last) * 4 + first
#
# first/last use c2/c3 as 0/1
# M/N use c4/c5 as 0/1
#
# carry  is gates[2F:3F]
# carry2 is gates[3F:4F]
# carry uses c6/c7 as 0/1

c4 = [23, -37, -10, -1, -87, 43, 67, -67, -72, -47, 25, 54, -84, -95, 54, -86, -59, 53, -44, -50, 60, -30, 71, 15, -63, -86, 62, -79, 2, 32, 36, 47, 86, 16, -86, 97, 57, 5, -40, 62, 84, 29, -43, -4, 36, -48, 64, -92, 31, -13, -53, 5, -64, 28, 60, 72, -47, 41, -63, 28, 73, -89, 38, -15, 34, -47, -71, -37, -17, -62, 7, -94, 0, 79, 12, -79, -74, -54, -31, 41, 2, -79, -31, -12, 24, 1, 31, -55, -40, -29, 91, -85, -5, -22, 21, 59, 17, 69, 30, 99, 13, -14, 60, 90, 45, 78, 6, 77, 71, 1, -64, 21, -2, 9, -16, -78, -21, 40, 98, -31, 14, 14, -75, 74, -93, -47, -74, -73, -98, 39, -80, 87, 82, -86, 71, 31, 97, 16, 62, -48, -36, -7, 99, 80, -99, -81, 65, 81, -63, -98, -55, -56, 70, 11, 61, -17, -62, 37, -52, -72, 93, -25, 89, -83, 58, 72, 4, -22, -20, -5, 40, -93, -26, 19, -39, -43, 11, 16, -36, 87, 93, -15, 18, -37, 11, -90, -10, 97, 96, 0, 52, 86, 51, 73, 23, 96, 51, -51, -15, 55, -44, 55, 86, 46, -2, -46, 52, -55, -62, 12, 2, 8, 68, -54, 74, -1, -3, 5, 70, -53, -1, -58, -14, -74, 36, -77, 61, 56, -18, -25, -8, 39, -87, 99, 44, 20, -26, -68, -65, 92, 49, -28, 73, 40, -4, 38, 24, -36, -20, -62, -92, -82, 36, 72, -74, 52, -81, -32, -57, 2, -48, -3, 20, 14, 25, -3, 59, 6, 96, -99, 11, 32, 19, -1, -32, -50, 5, -55, 60, -83, -56, -47, 23, 7, 56, 43, 87, -65, -27, -93, -45, 3, -36, 46, -25, -32, -6, -33, 40, -25, -37, -76, 18, 93, 1, -5, -69, 68, 5, -89, 72, 48, -9, -24, 18, -57, -68, -75, -86, -6, 3, -26, -82, 62, -75, -48, 33, -47, -56, 91, 77, -6, -11, 15, -99, 85, -84, -67, 68, -30, 58, 34, 6, -9, -5, -22, -45, -24, -22, 15, 12, 93, -99, -20, -88, -73, 16, 18, 10, -49, 87, 31, 79, -34, 15, -77, 55, 9, -55, 94, 83, -97, 89, -54, 26, -3, -56, 36, -16, -89, 53, 71, -29, 45, -49, 18, -16, -96, 5, 4, -72, 76, -48, -40, -13, -60, 86, 87, -29, 3, -54, -89, 41, 72, -39, 60, -26, 9, -1, -3, -2, 1, -55, 66, 65, -93, -56, 20, 33, -46, -97, -72, -55, 41, 95, 30, 65, 88, 85, 41, 14, 59, -66, -62, -69, -41, 95, -33, -88, -84, -82, -50, 5, -40, -12, -14, 76, -9, -60, 12, -31, -86, 6, -86, 46, -81, 12, -36, 38, 85, -84, 5, 98, -52, -72, 73, -38, -63, -16, 35, -15, -62, 95, -19, -29, -57, -5, -15, 50, -39, -33, -3, 38, -89, -74, 81, -57, 98, -63, -11, 47, 97, 82, 64, 51, -25, 85, 88, -67, 94, 57, 18, -72, 59, -42, 8, 27, -87, -48, -96, -13, -41]
c5 = [23, -44, 23, -62, -91, 30, 95, 42, -60, -13, -41, 18, -31, 1, -48, 89, -49, -97, -80, 56, -22, -45, -36, 94, -86, -90, -64, 18, 86, 49, -21, 74, 14, 75, 76, 87, -79, -19, -21, -64, 22, -87, 76, 3, -71, -95, 45, -63, 8, -86, -93, 56, -50, -23, 2, -71, 81, 26, -45, -88, -1, 77, 95, -22, 3, 1, 30, 90, -33, -60, -69, 44, 12, -30, 30, 83, 48, 14, -29, -81, -89, 59, 79, -44, -36, -54, -34, 80, 78, 54, -87, 83, 20, -67, -52, 46, -58, 7, -36, 2, 66, -30, 26, 89, 18, 78, -33, -77, -87, 48, -72, 1, -51, -21, -58, -38, 6, -55, -13, -17, -65, 56, 92, -79, -52, -82, -95, -28, 5, 93, 20, 65, 36, 48, -75, -89, -27, -62, 35, 49, -45, -82, -77, 28, 65, 57, -10, -61, -79, -12, 19, 10, -10, 72, -6, -99, 53, -3, -88, -17, -15, 45, 7, 64, -99, -90, 35, 73, -43, -48, 25, 47, 98, 58, -90, 66, -85, 51, 13, -40, 82, -60, 47, 88, -32, 8, 61, -23, 27, 44, -91, 44, 19, 37, 87, -97, 95, -74, -65, -44, -10, 75, 71, -2, 53, 88, 37, -57, -9, 61, -54, -28, 43, -35, -33, -85, 47, 12, 49, -95, 96, -63, 24, 76, 94, -91, -37, 89, -82, -11, -47, 0, 34, -96, -56, -41, 77, 49, -57, -24, -27, -3, 59, -94, 26, -27, 64, 0, 12, 66, 56, 88, -7, 86, -19, -89, -91, -49, -41, -43, 2, -59, -24, 13, -25, 54, 81, 32, -29, 47, 9, -79, 50, 72, -72, -98, 13, 15, 54, -46, -89, 6, -49, 32, -58, -12, -44, 32, 23, 41, -66, -93, -50, 65, 39, -86, 20, -91, 24, -9, 85, 28, -26, 1, -26, 60, 68, -35, -3, -76, 23, 50, -20, 25, 11, -55, -34, 46, -30, 61, -39, -60, -62, 53, -51, 70, -70, -1, 40, -80, -19, 12, 93, -56, 87, -80, -64, 23, -39, 11, -67, -38, 67, 72, 38, -61, 61, -23, -62, 24, -11, 91, 62, -88, -72, 16, 44, -72, -69, 38, 68, 60, 15, -15, 44, -52, 93, -90, 35, -41, 95, -54, -8, -61, 5, 67, 48, -33, -88, -39, -58, -54, -39, 44, -77, -25, 16, 91, -58, 40, 47, -44, 78, -21, 68, 48, -68, -24, -31, 46, 97, 79, -64, 51, 29, 33, 36, 63, 29, 10, 81, -37, 77, -4, -61, 30, 35, -45, -32, -29, -98, -38, -86, 74, 52, 58, -82, -97, 90, -43, 71, -29, 34, 38, 26, 12, 93, 8, 17, -61, 63, -72, -96, 6, -56, 2, -5, 72, -56, 74, 28, 78, 34, 57, 74, -14, 79, -38, -76, 86, 15, -55, -33, 35, 1, 7, 89, -77, -80, 3, 46, 61, -76, 13, 90, 7, -12, 57, 47, -22, -78, -44, -26, -32, 26, 76, -50, -75, 48, 43, 42, -67, 10, 54, 7, 51, -85, 51, 52, -86, -47, -16, 59, 64, 90, 49, -27, 75, 10, 88, -95, -73]
c6 = [-54, -44, 87, -73, 96, -88, -23, 13, -59, 66, -38, -27, -14, -93, 87, -7, 27, -25, 82, -35, 21, 69, -51, -49, -35, 21, 26, 1, 68, -83, 95, 19, -59, 36, 61, -29, -48, -20, 33, -5, 19, 71, -82, -85, 69, 2, 21, 51, 60, -97, -93, 75, 30, 32, 26, 33, -5, -46, -49, -73, 71, -50, 78, -83, -60, -45, 93, -46, 81, -95, -20, -26, -40, -16, -23, 1, 11, 86, 35, -98, -19, 93, 63, -22, 81, 8, 69, 48, 92, -39, -68, -51, -78, -48, 23, 42, 25, 54, 31, 42, -53, 92, 48, -2, 84, -28, -57, -58, 24, 72, -71, -32, 47, 41, -35, -32, -84, -8, -35, -94, 57, 92, -63, 73, 85, -98, -97, 5, 25, 5, -22, 36, 88, -9, 81, 88, 49, 34, 89, -46, 91, -57, -51, -72, -40, 35, 86, -89, -46, 72, -87, -81, 82, -70, 57, -13, -88, -53, 52, -20, 6, -5, -13, -90, 15, -73, 63, -57, 11, 41, -46, -11, 37, -39, -57, 91, 48, -57, 23, 61, 44, -77, 1, -80, 80, 31, 12, -45, -78, -80, 3, -59, -96, 73, -51, -52, 98, 73, -84, 80, 81, -64, 68, -6, -25, 95, -81, -42, 2, -28, -73, -1, 39, 85, -54, -84, 12, -90, 2, -76, -58, -60, 20, 43, -84, 83, -48, -69, 37, -12, 41, 3, 92, 19, -1, 84, 80, -62, -92, -50, -43, -78, 32, -83, -22, -76, -86, 71, -58, -23, 80, 13, -74, 47, -75, 88, -36, 20, 11, -72, 23, 85, -88, -55, 54, -68, 19, 6, -43, -95, -54, 34, -4, 59, 32, -72, -74, -82, -85, 45, -61, 98, -4, 29, -28, -31, 13, 58, 72, -85, -3, -50, 4, 31, 58, -97, 9, 38, -67, -99, 51, 63, 39, 39, 32, 52, -39, 80, -96, -41, 65, 45, 22, -57, -16, -58, -79, 76, 86, -92, 37, 96, -48, 52, 63, 59, -93, 84, -56, 25, 23, 88, 47, -83, -75, 46, 87, 48, -16, -40, 74, -74, -39, 16, 25, 26, 46, 86, 39, 41, -77, -17, -43, 87, 8, -95, -20, -44, 95, 66, 63, -22, -24, 24, -20, -5, 80, 38, -77, 88, -78, -73, -92, 50, 85, -8, 3, 24, -68, 39, 50, 23, -36, 49, 29, -89, 98, -33, -9, -35, 69, 26, 36, -47, 20, 63, 97, 94, -6, -78, -60, 58, 29, 12, -88, -17, -12, -71, 59, -99, 98, -76, -69, 60, -8, -60, -40, -55, 5, -99, 82, 55, 51, -65, -10, 90, 60, 15, 74, 10, 72, 51, -82, 38, -13, 41, -7, -98, 3, -5, 59, -58, -7, -99, 73, -66, -54, 83, 94, 33, 45, 21, 76, 40, 36, -45, -92, -41, 97, -71, -99, 65, -23, 52, 44, -12, -95, -73, -97, -30, 76, -34, -75, -55, -71, 77, 65, -13, 20, -25, -56, 63, -54, -66, -37, 15, -11, -51, 67, 73, -90, 74, -32, -62, -97, -15, -17, 77, -3, 38, 10, -74, -9, 82, 93, 13, -34, 33, -41, -13, -63, -98]
c7 = [-29, -4, 81, 59, 56, -42, 68, 9, 11, 77, 75, 37, 8, -2, -13, -57, -13, -54, -66, 2, 19, -82, 67, 87, -19, 36, -51, -94, -17, 20, 5, -98, -23, 23, -64, 49, 36, -18, 31, 77, -40, -49, -18, 25, -62, -46, -87, 97, -62, -48, -16, -80, 37, 13, -36, 84, 67, 47, 12, -74, 95, -44, -66, -67, -79, 80, 70, -98, -2, 38, -17, 35, -49, -17, -4, 56, -25, 75, -43, 89, -98, 87, 18, -33, -7, 70, -32, -27, 55, 2, -4, -32, 85, 4, -28, -31, -5, -24, 1, -50, 37, 14, 64, 17, 73, 62, -39, -28, 67, -14, 56, -62, -36, 14, 69, -2, -63, 29, 64, -98, 86, 59, -70, -68, 47, 55, 91, -5, 96, 62, 20, 39, -73, 45, -23, -15, 23, 56, 44, -98, -98, -86, 13, -66, -80, -60, -36, -48, 14, -43, -38, -81, 59, 15, 57, 86, 90, 69, -28, -59, -90, 87, -67, -2, 93, -58, -28, 11, -86, -29, -33, 8, -60, 29, 46, -81, -69, 42, 55, -6, -44, -15, -30, -82, -20, -65, 14, 96, 89, 55, 25, 79, 76, -43, -23, 48, -87, -96, -92, -2, 56, -28, 2, -63, 13, 47, 76, 44, 16, -68, 18, -60, -4, 66, -46, 7, 40, -79, -52, 40, 50, 69, -52, -25, 83, -7, 63, -26, -77, -20, -23, -90, 66, 17, -29, -99, 11, -96, -64, -63, -55, -45, 63, -54, 51, -2, 49, -67, -96, -73, -73, -70, 38, -58, 11, 95, 50, -20, 31, 42, 73, -73, 59, -13, 61, 85, 70, 7, -76, -2, -18, -14, 52, -13, 64, -31, -25, -32, 56, 26, 69, -14, 74, 83, -8, 60, -29, -41, 76, -35, 20, -5, 3, -34, 87, -86, 21, -58, 74, -48, -57, -65, -62, -99, -8, -31, -87, 8, 33, 74, 44, 81, 19, -15, -86, 96, 38, 76, -23, 82, 37, -47, -46, -4, -50, 15, 83, -41, -49, 33, 30, 17, 66, -21, 77, 57, 58, 20, -23, 29, 24, -91, -61, 98, 26, -41, 19, -60, -70, -67, -50, -20, 32, 29, -74, -58, -84, 77, -29, -91, 64, 96, 94, -32, -70, 96, -8, -34, 9, -18, 49, 84, 62, -12, 53, 95, 2, 64, 49, 60, -62, -37, -6, 1, -25, -58, 22, -89, -5, 80, 43, -4, -47, -72, -40, 46, 19, 19, 17, 57, 54, -30, -93, 37, -93, -61, -84, -56, 83, 76, -35, -93, -25, 97, -56, -28, 61, 42, -7, 96, 68, 12, -44, 75, 29, 13, -38, -49, -36, 68, 46, 14, 40, 75, 10, -12, 26, 9, -71, 14, -90, 18, -29, 53, 53, 60, -10, 1, -39, -70, 42, -70, -44, 27, -24, 27, -34, 61, 28, -31, -69, -26, 80, 97, 30, 14, -39, -4, -58, 7, -21, 72, 92, 72, 40, -64, 28, -48, -30, 70, -65, 10, -57, -97, -53, 88, -31, 48, 75, -36, 87, 36, 94, -76, -21, 29, 12, -9, 81, -35, -80, 15, -60, -99, 34, -20, 63, 80, 27, 4, -2, -84]

for i in range(F):
  if c4[i] == c5[i]:
    c4[i] += 1
  if c6[i] == c7[i]:
    c6[i] += 1

for i in range(F):
  a = c2[i]
  b = c3[i]
  c = c4[i]
  d = c5[i]
  slope = (d-c)/(b-a)
  intercept = c - slope * a
  if i < F//2:
    a2 = c2[i+F//2]
    b2 = c3[i+F//2]
    c2x = c2[i]
    d2 = c3[i]
    slope2 = (d2-c2x)/(b2-a2)
    intercept2 = c2x - slope2 * a2
    print("gates[%d] = gates[%d];" % (0*F+i, F+i))
    print("gates[%d] = %0.9ff + %0.9ff * gates[%d];" % (F+i, intercept2, slope2, F+F//2+i))
  else:
    print("gates[%d] = %0.9ff;" % (0*F+i, a))
    print("gates[%d] = %0.9ff;" % (F+i, a))
  print('printf("zxa_%02d = %%f\\n", gates[%d]);' % (i, 0*F+i))
  print('printf("zxb_%02d = %%f\\n", gates[%d]);' % (i, 1*F+i))
  #print('printf("  as %0.9f + %0.9f * (%%f)\\n", gates[%d]);' % (intercept2, slope2, F+F//2+i))

  print("gates[%d] = %0.9ff + %0.9ff * gates[%d];" % (4*F+i, intercept, slope, F+i))
  print('printf("fzx_%02d = %%f\\n", gates[%d]);' % (i, 4*F+i))
  print('printf("  as %0.9f + %0.9f * (%%f)\\n", gates[%d]);' % (intercept, slope, F+i))

print("gates[%d] = %0.9ff; // c0" % (2*F, c6[0]))
print("gates[%d] = %0.9ff; // c0" % (3*F, c6[0]))

for i in range(F):
  a = c2[i] # A0
  b = c3[i] # A1
  c = c4[i] # B0
  d = c5[i] # B1
  e = c6[i] # C0
  f = c7[i] # C1

  x0,x1,y0,y1,z0,z1 = a,b,c,d,e,f

  amat = np.array([
      [1, x0, y0, z0, x0*y0, x0*z0, y0*z0, x0*y0*z0],
      [1, x1, y0, z0, x1*y0, x1*z0, y0*z0, x1*y0*z0],
      [1, x0, y1, z0, x0*y1, x0*z0, y1*z0, x0*y1*z0],
      [1, x1, y1, z0, x1*y1, x1*z0, y1*z0, x1*y1*z0],
      [1, x0, y0, z1, x0*y0, x0*z1, y0*z1, x0*y0*z1],
      [1, x1, y0, z1, x1*y0, x1*z1, y0*z1, x1*y0*z1],
      [1, x0, y1, z1, x0*y1, x0*z1, y1*z1, x0*y1*z1],
      [1, x1, y1, z1, x1*y1, x1*z1, y1*z1, x1*y1*z1],
  ])
  #print('printf("from %ff %ff %ff %ff %ff %ff\\n");' % (
  #    a,b,c,d,e,f))
  #print('printf("from %%f          %%f          %%f\\n", gates[%d], gates[%d], gates[%d]);' % (
  #    i, 4*F+i, 2*F+i))

  if i != F-1:
    g = c6[i+1] # C0'
    h = c7[i+1] # C1'
    bvec = np.array([g, g, g, h, g, h, h, h]) # carry
    p,q,r,s,t,u,v,w = numpy.linalg.solve(amat, bvec)
    print("gates[%d] = %0.9ff + %0.9ff * gates[%d] + %0.9ff * gates[%d] + %0.9ff * gates[%d] +" % (
        2*F+i+1, p, q, i, r, 4*F+i, s, 2*F+i))
    print("%0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] +" % (
        t, i, 4*F+i, u, i, 2*F+i, v, 4*F+i, 2*F+i))
    print("%0.9ff * gates[%d] * gates[%d] * gates[%d];" % (
        w, i, 4*F+i, 2*F+i))

  bvec = np.array([c, d, d, c, d, c, c, d]) # sum
  p,q,r,s,t,u,v,w = numpy.linalg.solve(amat, bvec)

  print("gates[%d] = %0.9ff + %0.9ff * gates[%d] + %0.9ff * gates[%d] + %0.9ff * gates[%d] +" % (
      4*F+i, p, q, i, r, 4*F+i, s, 2*F+i))
  print("%0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] +" % (
      t, i, 4*F+i, u, i, 2*F+i, v, 4*F+i, 2*F+i))
  print("%0.9ff * gates[%d] * gates[%d] * gates[%d];" % (
      w, i, 4*F+i, 2*F+i))

  print('printf("S_%d = %%d; C_%d = %%d\\n", fabs(gates[%d] - %f) < 0.5, fabs(gates[%d] - %f) < 0.5);' % (
      i, i, 4*F+i, d, 2*F+i+1, h))
  #print('printf("S_%d = %%f; C_%d = %%f\\n", gates[%d], gates[%d]);' % (
  #    i, i, 4*F+i, 2*F+i+1))

print("printf(\"done first+last\\n\");") # Still good.
# Now we have first+last in 4F
# Now we need to shift left twice to 5F, and twice more back to 4F.
print("gates[%d] = %0.9ff;" % (5*F + 0, c4[0]))
print("gates[%d] = %0.9ff;" % (5*F + 1, c4[1]))
for i in range(2, F):
  a = c4[i-2]
  b = c5[i-2]
  c = c4[i]
  d = c5[i]
  slope = (d-c)/(b-a)
  intercept = c - slope * a
  print("gates[%d] = %0.9ff + %0.9ff * gates[%d];" % (5*F+i, intercept, slope, 4*F+i-2))

for i in range(F):
  print('printf("Nbefore_%d = %%d; \\n", fabs(gates[%d] - %f) < 0.5 );' % (
      i, 5*F+i, c5[i]))
  #print('printf("Nbefore_%d = %%f; %f %f\\n", gates[%d]);' % (
  #    i, c4[i], c5[i], 5*F+i))

print("gates[%d] = %0.9ff;" % (4*F + 0, c4[0]))
print("gates[%d] = %0.9ff;" % (4*F + 1, c4[1]))
for i in range(2, F):
  a = c4[i-2]
  b = c5[i-2]
  c = c4[i]
  d = c5[i]
  slope = (d-c)/(b-a)
  intercept = c - slope * a
  print("gates[%d] = %0.9ff + %0.9ff * gates[%d];" % (4*F+i, intercept, slope, 5*F+i-2))

for i in range(F):
  print('printf("Mbefore_%d = %%d; \\n", fabs(gates[%d] - %f) < 0.5 );' % (
      i, 4*F+i, c5[i]))
  #print('printf("Mbefore_%d = %%f; %f %f\\n", gates[%d]);' % (
  #    i, c4[i], c5[i], 4*F+i))

  # Still good.

# Then we can add first ([:F]) to both 4F and 5F.

print("gates[%d] = %0.9ff; // c0" % (2*F, c6[0]))
print("gates[%d] = %0.9ff; // c0" % (3*F, c6[0]))

for i in range(F):
  a = c2[i] # A0
  b = c3[i] # A1
  c = c4[i] # B0
  d = c5[i] # B1
  e = c6[i] # C0
  f = c7[i] # C1

  x0,x1,y0,y1,z0,z1 = a,b,c,d,e,f

  amat = np.array([
      [1, x0, y0, z0, x0*y0, x0*z0, y0*z0, x0*y0*z0],
      [1, x1, y0, z0, x1*y0, x1*z0, y0*z0, x1*y0*z0],
      [1, x0, y1, z0, x0*y1, x0*z0, y1*z0, x0*y1*z0],
      [1, x1, y1, z0, x1*y1, x1*z0, y1*z0, x1*y1*z0],
      [1, x0, y0, z1, x0*y0, x0*z1, y0*z1, x0*y0*z1],
      [1, x1, y0, z1, x1*y0, x1*z1, y0*z1, x1*y0*z1],
      [1, x0, y1, z1, x0*y1, x0*z1, y1*z1, x0*y1*z1],
      [1, x1, y1, z1, x1*y1, x1*z1, y1*z1, x1*y1*z1],
  ])
  #print('printf("from %ff %ff %ff %ff %ff %ff\\n");' % (
  #    a,b,c,d,e,f))
  #print('printf("from %%f          %%f          %%f\\n", gates[%d], gates[%d], gates[%d]);' % (
  #    i, 4*F+i, 2*F+i))


  if i != F-1: # Don't overwrite...
    g = c6[i+1] # C0'
    h = c7[i+1] # C1'
    bvec = np.array([g, g, g, h, g, h, h, h]) # carry
    p,q,r,s,t,u,v,w = numpy.linalg.solve(amat, bvec)
    print("gates[%d] = %0.9ff + %0.9ff * gates[%d] + %0.9ff * gates[%d] + %0.9ff * gates[%d] +" % (
        2*F+i+1, p, q, i, r, 4*F+i, s, 2*F+i))
    print("%0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] +" % (
        t, i, 4*F+i, u, i, 2*F+i, v, 4*F+i, 2*F+i))
    print("%0.9ff * gates[%d] * gates[%d] * gates[%d];" % (
        w, i, 4*F+i, 2*F+i))
    print("gates[%d] = %0.9ff + %0.9ff * gates[%d] + %0.9ff * gates[%d] + %0.9ff * gates[%d] +" % (
        3*F+i+1, p, q, i, r, 5*F+i, s, 3*F+i))
    print("%0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] +" % (
        t, i, 5*F+i, u, i, 3*F+i, v, 5*F+i, 3*F+i))
    print("%0.9ff * gates[%d] * gates[%d] * gates[%d];" % (
        w, i, 5*F+i, 3*F+i))

  bvec = np.array([c, d, d, c, d, c, c, d]) # sum
  p,q,r,s,t,u,v,w = numpy.linalg.solve(amat, bvec)

  print("gates[%d] = %0.9ff + %0.9ff * gates[%d] + %0.9ff * gates[%d] + %0.9ff * gates[%d] +" % (
      4*F+i, p, q, i, r, 4*F+i, s, 2*F+i))
  print("%0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] +" % (
      t, i, 4*F+i, u, i, 2*F+i, v, 4*F+i, 2*F+i))
  print("%0.9ff * gates[%d] * gates[%d] * gates[%d];" % (
      w, i, 4*F+i, 2*F+i))
  print("gates[%d] = %0.9ff + %0.9ff * gates[%d] + %0.9ff * gates[%d] + %0.9ff * gates[%d] +" % (
      5*F+i, p, q, i, r, 5*F+i, s, 3*F+i))
  print("%0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] + %0.9ff * gates[%d] * gates[%d] +" % (
      t, i, 5*F+i, u, i, 3*F+i, v, 5*F+i, 3*F+i))
  print("%0.9ff * gates[%d] * gates[%d] * gates[%d];" % (
      w, i, 5*F+i, 3*F+i))

  #print('printf("M_%d = %%d; C_%d = %%d\\n", fabs(gates[%d] - %f) < 0.5, fabs(gates[%d] - %f) < 0.5);' % (
  #    i, i, 4*F+i, d, 2*F+i+1, h))
  #print('printf("M_%d = %%f; C_%d = %%f\\n", gates[%d], gates[%d]);' % (
  #    i, i, 4*F+i, 2*F+i+1))

  print('printf("N_%d = %%d; C_%d = %%d\\n", fabs(gates[%d] - %f) < 0.5, fabs(gates[%d] - %f) < 0.5);' % (
      i, i, 5*F+i, d, 3*F+i+1, h))
  #print('printf("N_%d = %%f; C_%d = %%f\\n", gates[%d], gates[%d]);' % (
  #    i, i, 5*F+i, 3*F+i+1))

first = f9 & ((1<<(F//2))-1)
last = f9 >> (F//2)
print("// first: %s, last: %s" % (hex(first), hex(last)))

expected_M = (first+last) * 16 + first
expected_N = (first+last) * 4 + first

print("// expected M: %s, N: %s" % (hex(expected_M), hex(expected_N)))

# Finally, we subtract the expected value (or rather xor it out);
# then check if all are zero (by using NaNd).

for i in range(F):
  a = [c5[i], c4[i]][ (expected_M>>i) & 1 ]
  b = [c5[i], c4[i]][ (expected_N>>i) & 1 ]
  # Wrong rounding of -0.5!!!
  print("gates[%d] = ((int)(gates[%d] - %0.9ff + 1000.5f)) - 1000.f;" % (4*F+i, 4*F+i, a))
  print("gates[%d] = ((int)(gates[%d] - %0.9ff + 1000.5f)) - 1000.f;" % (5*F+i, 5*F+i, b))
  print('printf("%d: %%f and %%f (%f %f)\\n", gates[%d], gates[%d]);' % (i, c4[i], c5[i], 4*F+i, 5*F+i))

# Now they are 0.0 if incorrect, or n.0 if correct. Let's 1/x and * 0
for i in range(F):
  print("gates[%d] = 1.0f / gates[%d] * 0.0f;" % (4*F+i, 4*F+i))
  print("gates[%d] = 1.0f / gates[%d] * 0.0f;" % (5*F+i, 5*F+i))
  print('printf("%d: %%f and %%f\\n", gates[%d], gates[%d]);' % (i, 4*F+i, 5*F+i))

print("gates[0] = 0.0f;")

for i in range(F):
  print("gates[0] += gates[%d];" % (4*F+i))
  print("gates[0] += gates[%d];" % (5*F+i))

print("gates[0] *= 0.0f;")
print('printf("final: %f\\n", gates[0]);')

# TODO: when done, and the flag is longer, check if precision remains... we
# probably need to round the intermediates at some point.






